/** Generate JWT(JSON Web Token) to request access token
    * How to generate JWT: https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatingjwt
    *
    * If we need to generate a new Service Account in the Google Developer Console,
    * we are going to receive a .p12 file as the private key. We need to convert it to .der.
    * That way the standard Java library can handle that.
    *
    * Covert the .p12 file to .pem with the following command:
    * openssl pkcs12 -in <FILENAME>.p12 -out <FILENAME>.pem -nodes
    *
    * Convert the .pem file to .der with the following command:
    * openssl pkcs8 -topk8 -inform PEM -outform DER -in <FILENAME>.pem -out <FILENAME>.der -nocrypt
    *
    * */
  private def generateJWT(): String = {

    // Generating the Header
    val header = Json.obj("alg" -> "RS256", "typ" -> "JWT").toString()

    // Generating the Claim Set
    val currentDate = DateTime.now(DateTimeZone.UTC)
    val claimSet =Json.obj(
      "iss" -> "<YOUR_SERVICE_ACCOUNT_EMAIL>",
      "scope" -> "https://www.googleapis.com/auth/androidpublisher",
      "aud" -> "https://www.googleapis.com/oauth2/v4/token",
      "exp" -> currentDate.plusMinutes(5).getMillis / 1000,
      "iat" -> currentDate.getMillis / 1000
    ).toString()

    // Base64URL encoded body
    val encodedHeader = Base64.getEncoder.encodeToString(header.getBytes(StandardCharsets.UTF_8))
    val encodedClaimSet = Base64.getEncoder.encodeToString(claimSet.getBytes(StandardCharsets.UTF_8))

    // use header and claim set as input for signature in the following format:
    // {Base64url encoded JSON header}.{Base64url encoded JSON claim set}
    val jwtSignatureInput = s"$encodedHeader.$encodedClaimSet"
    // use private key generated by Google Developer console to sign the content
    val keyFile = Paths.get("<path_to_google_play_store_api.der>");
    val keyBytes = Files.readAllBytes(keyFile);

    val keyFactory = KeyFactory.getInstance("RSA")
    val keySpec = new PKCS8EncodedKeySpec(keyBytes)
    val privateKey = keyFactory.generatePrivate(keySpec)

    // Sign payload using the private key
    val sign = Signature.getInstance("SHA256withRSA")
    sign.initSign(privateKey)
    sign.update(jwtSignatureInput.getBytes(StandardCharsets.UTF_8))
    val signatureByteArray = sign.sign()
    val signature = Base64.getEncoder.encodeToString(signatureByteArray)

    // Generate the JWT in the following format:
    // {Base64url encoded JSON header}.{Base64url encoded JSON claim set}.{Base64url encoded signature}
    s"$encodedHeader.$encodedClaimSet.$signature"
  }