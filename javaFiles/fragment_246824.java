/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package demo;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LineString;
import com.vividsolutions.jts.simplify.DouglasPeuckerSimplifier;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author hdunsford
 */
public class DrawPanel extends javax.swing.JPanel {

    private List<Coordinate> coords;

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
        coords = new ArrayList<>();

        this.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent e) {
                coords.add(new Coordinate(e.getX(), e.getY()));
                repaint();
            }

            @Override
            public void mouseMoved(MouseEvent e) {

            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        try {
            super.paintComponent(g); // paint background
            Graphics2D g2d = (Graphics2D) g;
            g2d.setStroke(new BasicStroke(2));
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            GeometryFactory f = new GeometryFactory();

            if (coords.size() < 2) {
                return;
            }
            LineString ls = f.createLineString(coords.toArray(new Coordinate[0]));
            //Geometry simple = ls;
            Geometry simple = DouglasPeuckerSimplifier.simplify(ls, 3.0);
            if (simple.getCoordinates().length < 2) {
                return;
            }
            List<Coordinate> raw = new ArrayList<>();
            raw.addAll(Arrays.asList(simple.getCoordinates()));
            List<Coordinate> spline = CatmullRom.interpolate(raw, 10);

            int[] xPoints = new int[spline.size()];
            int[] yPoints = new int[spline.size()];
            for (int i = 0; i < spline.size(); i++) {
                xPoints[i] = (int) spline.get(i).x;
                yPoints[i] = (int) spline.get(i).y;
            }

            g2d.setColor(Color.red);
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.drawPolyline(xPoints, yPoints, xPoints.length);
        } catch (Exception ex) {
            Logger.getLogger(DrawPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING:
     * Do NOT modify this code. The content of this method is always regenerated by the
     * Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration                   
}