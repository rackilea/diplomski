package example;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;

import example.ResourcesType.Classrooms;

public class Demo {

    public static void main(String[] args) throws Exception {
        // This is the ObjectFactory that was generated by XJC
        ObjectFactory objectFactory = new ObjectFactory();

        // You can instantiate objects using the constructors
        ResourcesType resourcesType = new ResourcesType();

        // You can instantiate objects using the ObjectFactory
        Classrooms classRooms = objectFactory.createResourcesTypeClassrooms();
        resourcesType.setClassrooms(classRooms);

        // You can use the ObjectFactory to wrap an object in a JAXBElement
        ResourceType resourceType1 = new ResourceType();
        JAXBElement<ResourceType> jaxbElement1 = objectFactory.createResourcesTypeClassesResource(resourceType1);
        classRooms.getContent().add(jaxbElement1);

        ResourceType resourceType2 = objectFactory.createResourceType();
        JAXBElement<ResourceType> jaxbElement2 = objectFactory.createResourcesTypeClassesResource(resourceType2);
        classRooms.getContent().add(jaxbElement2);

        // You can create a JAXBContext on the package name of your generated classes
        JAXBContext jc = JAXBContext.newInstance("example");

        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

        // You can also create an instance of JAXBElement without using the ObjectFactory
        JAXBElement<ResourcesType> rootElement = new JAXBElement<ResourcesType>(new QName("root"), ResourcesType.class, resourcesType);
        marshaller.marshal(rootElement, System.out);
    }

}